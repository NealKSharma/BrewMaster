@model BrewMaster.Models.CartViewModel
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="cart-container">
    <h2>Shopping Cart</h2>

    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
    {
        <div class="error-message">@TempData["ErrorMessage"]</div>
    }

    @if (Model.IsEmpty)
    {
        <div class="empty-cart">
            <div class="empty-icon">🛒</div>
            <h3>Your cart is empty</h3>
            <p>Add some products to get started!</p>
            <a href="@Url.Action("Index", "User")" class="btn btn-primary">Continue Shopping</a>
        </div>
    }
    else
    {
        <div class="cart-content">
            <div class="cart-items">
                @foreach (var item in Model.Items)
                {
                    <div class="cart-item" id="cart-item-@item.CartId">
                        <img src="@Url.Action("ProductImage", "User", new { id = item.ProductId })"
                             alt="@item.ProductName" class="item-image">

                        <div class="item-details">
                            <h4>@item.ProductName</h4>
                            <p class="price">₹@item.Price.ToString("N2") each</p>
                            <p class="stock">@item.Stock available</p>
                        </div>

                        <div class="quantity-controls">
                            <button onclick="updateQuantity(@item.CartId, @(item.Quantity - 1))" class="qty-btn">-</button>
                            <span class="quantity">@item.Quantity</span>
                            <button onclick="updateQuantity(@item.CartId, @(item.Quantity + 1))"
                                    class="qty-btn" @(item.Quantity >= item.Stock ? "disabled" : "")>
                                +
                            </button>
                        </div>

                        <div class="item-total">₹@item.ItemTotal.ToString("N2")</div>

                        <button onclick="removeItem(@item.CartId)" class="remove-btn" title="Remove">×</button>
                    </div>
                }
            </div>

            <div class="order-summary">
                <h3>Order Summary</h3>
                <div class="summary-row">
                    <span>Items (@Model.ItemCount):</span>
                    <span>₹@Model.Total.ToString("N2")</span>
                </div>
                <div class="summary-total">
                    <span>Total:</span>
                    <span>₹@Model.Total.ToString("N2")</span>
                </div>

                <form asp-action="Checkout" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-success">Proceed to Checkout</button>
                </form>

                <a href="@Url.Action("Index", "User")" class="btn btn-secondary">Continue Shopping</a>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function updateQuantity(cartId, newQuantity) {
            if (newQuantity < 0) return;

            const formData = new FormData();
            formData.append('cartId', cartId);
            formData.append('quantity', newQuantity);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch('@Url.Action("UpdateQuantity")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to update quantity');
                }
            })
            .catch(() => alert('Error updating quantity'));
        }

        function removeItem(cartId) {

            const formData = new FormData();
            formData.append('cartId', cartId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            fetch('@Url.Action("RemoveItem")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to remove item');
                }
            })
            .catch(() => alert('Error removing item'));
        }
    </script>
}

<style>
    .cart-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

        .cart-container h2 {
            margin-bottom: 2rem;
            color: #F5DEB3;
        }

    .error-message {
        background: rgba(255, 107, 107, 0.1);
        border: 1px solid #FF6B6B;
        color: #FF6B6B;
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1rem;
    }

    .empty-cart {
        text-align: center;
        padding: 4rem 2rem;
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-cart h3 {
        color: #F5DEB3;
        margin-bottom: 0.5rem;
    }

    .empty-cart p {
        color: #C0A672;
        margin-bottom: 2rem;
    }

    .cart-content {
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 2rem;
    }

    .cart-item {
        display: grid;
        grid-template-columns: 80px 1fr auto auto auto;
        gap: 1rem;
        align-items: center;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.04);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        margin-bottom: 1rem;
    }

    .item-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 12px;
    }

    .item-details h4 {
        margin: 0 0 0.5rem 0;
        color: #F5DEB3;
    }

    .price {
        margin: 0;
        font-weight: 600;
        color: #F5DEB3;
    }

    .stock {
        margin: 0;
        font-size: 0.9rem;
        color: #C0A672;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .qty-btn {
        width: 32px;
        height: 32px;
        border: 2px solid #5D2F0F;
        background: rgba(255, 255, 255, 0.08);
        color: #F5DEB3;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .qty-btn:hover:not(:disabled) {
            border-color: #F5DEB3;
            background: rgba(255, 255, 255, 0.12);
        }

        .qty-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .quantity {
        min-width: 40px;
        text-align: center;
        font-weight: 600;
        color: #F5DEB3;
    }

    .item-total {
        font-weight: 600;
        font-size: 1.1rem;
        color: #F5DEB3;
    }

    .remove-btn {
        width: 32px;
        height: 32px;
        border: none;
        background: rgba(220, 20, 60, 0.2);
        color: #FF6B6B;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .remove-btn:hover {
            background: rgba(220, 20, 60, 0.4);
            transform: translateY(-2px);
        }

    .order-summary {
        background: rgba(255, 255, 255, 0.04);
        backdrop-filter: blur(10px);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        height: fit-content;
        position: sticky;
        top: 2rem;
    }

        .order-summary h3 {
            margin: 0 0 1.5rem 0;
            color: #F5DEB3;
        }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        color: #C0A672;
    }

    .summary-total {
        display: flex;
        justify-content: space-between;
        padding: 1rem 0;
        border-top: 1px solid rgba(245, 222, 179, 0.2);
        font-weight: 600;
        font-size: 1.1rem;
        color: #F5DEB3;
        margin-bottom: 1.5rem;
    }

    .cart-container .btn {
        display: block;
        width: 100%;
        padding: 0.75rem 1.25rem;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        text-decoration: none;
        text-align: center;
        cursor: pointer;
        margin-bottom: 0.75rem;
        transition: all 0.3s ease;
    }

    .cart-container .btn-primary {
        background: linear-gradient(135deg, #8B4513 0%, #5D2F0F 100%);
        color: #F5DEB3;
        box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4);
    }

        .cart-container .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(139, 69, 19, 0.6);
        }

    .cart-container .btn-success {
        background: linear-gradient(135deg, #228B22 0%, #006400 100%);
        color: #F5DEB3;
        box-shadow: 0 4px 12px rgba(34, 139, 34, 0.4);
    }

        .cart-container .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(34, 139, 34, 0.6);
        }
</style>