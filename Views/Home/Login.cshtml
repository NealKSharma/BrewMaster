@model BrewMaster.Models.CombinedLoginResetViewModel

@{
    ViewData["Title"] = "Log In";
}

<style>
    .btn-secondary {
        color: #F5DEB3;
    }

        .btn-secondary:hover {
            transform: translateY(-2px);
        }

        .btn-secondary:active {
            transform: translateY(0);
        }

    .form-columns {
        display: flex;
        justify-content: space-between;
        gap: 2rem;
        flex-wrap: wrap;
    }

    .form-column {
        flex: 1 1 45%;
        min-width: 250px;
    }

    .full-width {
        width: 100%;
        padding: 1rem;
        font-size: 1.1rem;
        margin-top: 1.5rem;
    }

    .wide-panel .form-container {
        max-width: 1000px;
        margin: 1.5rem auto;
    }
</style>

<!-- LOGIN & USERNAME FORMS (regular width) -->
<div class="form-container">
    @if (TempData["ResetSuccess"] != null)
    {
        <div class="alert alert-success text-center">
            @TempData["ResetSuccess"]
        </div>
    }

    <!-- LOGIN FORM -->
    <div id="loginPanel">
        <div class="form-header">
            <h2>Login to Your Account</h2>
        </div>

        <form asp-action="Login" method="post" class="form-body">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label class="form-label">Username</label>
                <input name="Username" class="form-input" placeholder="Enter your username" />
                <span class="validation-error">@Html.ValidationMessage("Username")</span>
            </div>

            <div class="form-group">
                <label class="form-label">Password</label>
                <input name="Password" type="password" class="form-input" placeholder="Enter your password" />
                <span class="validation-error">@Html.ValidationMessage("Password")</span>
            </div>

            @if (ViewContext.RouteData.Values["action"]?.ToString() == "Login")
            {
                foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <div class="validation-error-summary">@error.ErrorMessage</div>
                }
            }

            <div class="form-group text-center" style="gap: 1rem; margin: 1rem;">
                <button type="submit" class="btn btn-primary">Login</button>
                <button type="button" id="showUsernameForm" class="btn btn-secondary">Forgot Password</button>
            </div>
        </form>
    </div>

    <!-- USERNAME FORM -->
    <div id="usernamePanel" style="display:none;">
        <div class="form-header">
            <h2>Recover Your Account</h2>
        </div>

        <div class="form-body">
            <div class="form-group">
                <label class="form-label">Username</label>
                <input id="usernameInput" class="form-input" placeholder="Enter your username" />
                <span id="usernameError" class="validation-error"></span>
            </div>

            <div class="form-group text-center">
                <button type="button" id="continueToSecurity" class="btn btn-primary">Continue</button>
                <button type="button" class="btn btn-secondary" id="backToLogin1">Back to Login</button>
            </div>
        </div>
    </div>
</div>

<!-- RESET PASSWORD FORM (wider layout) -->
<div id="forgotPanel" class="wide-panel" style="display:none;">
    <div class="form-container">
        <div class="form-header">
            <h2>Reset Your Password</h2>
        </div>

        <form id="resetForm" asp-action="ForgotPassword" method="post" class="form-body">
            @Html.AntiForgeryToken()
            <input type="hidden" name="Username" id="resetUsername" />

            <div class="form-columns">
                <!-- LEFT COLUMN -->
                <div class="form-column">
                    <div class="form-group">
                        <label class="form-label">Security Question</label>
                        <div id="securityQuestionDisplay" style="margin-top: 6px; font-size: 1.8rem;">
                            @(Model?.Reset?.SecurityQuestion ?? "")
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="SecurityAnswer">Answer</label>
                        <input name="SecurityAnswer" class="form-input" placeholder="Enter the answer" />
                        <span class="validation-error">@Html.ValidationMessage("SecurityAnswer")</span>
                    </div>
                </div>

                <!-- RIGHT COLUMN -->
                <div class="form-column">
                    <div class="form-group">
                        <label class="form-label" for="Password">New Password</label>
                        <input name="Password" type="password" class="form-input" placeholder="Create a new password" />
                        <span class="validation-error">@Html.ValidationMessage("Password")</span>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="ConfirmPassword">Confirm Password</label>
                        <input name="ConfirmPassword" type="password" class="form-input" placeholder="Confirm your password" />
                        <span class="validation-error">@Html.ValidationMessage("ConfirmPassword")</span>
                    </div>
                </div>
            </div>

            <!-- FULL WIDTH BUTTON BELOW -->
            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary full-width">Reset Password</button>
                <button type="button" class="btn btn-secondary full-width" id="backToLogin2">Back to Login</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        const loginPanel = document.getElementById("loginPanel");
        const usernamePanel = document.getElementById("usernamePanel");
        const forgotPanel = document.getElementById("forgotPanel");

        const usernameInput = document.getElementById("usernameInput");
        const usernameError = document.getElementById("usernameError");
        const resetUsername = document.getElementById("resetUsername");
        const securityQuestionDisplay = document.getElementById("securityQuestionDisplay");

        function clearValidationErrors() {
            document.querySelectorAll('.validation-error-summary').forEach(el => el.remove());
            document.querySelectorAll('.validation-error').forEach(el => el.textContent = '');
        }

        function showLoginPanel() {
            clearValidationErrors();
            usernamePanel.style.display = "none";
            forgotPanel.style.display = "none";
            loginPanel.style.display = "block";
        }

        document.getElementById("showUsernameForm").addEventListener("click", () => {
            clearValidationErrors();
            loginPanel.style.display = "none";
            usernamePanel.style.display = "block";
        });

        document.getElementById("backToLogin1").addEventListener("click", showLoginPanel);
        document.getElementById("backToLogin2").addEventListener("click", showLoginPanel);

        document.getElementById("continueToSecurity").addEventListener("click", () => {
            const username = usernameInput.value.trim();
            usernameError.textContent = "";
            clearValidationErrors();

            if (!username) {
                usernameError.textContent = "Username is required.";
                return;
            }

            fetch("/Home/GetSecurityQuestionAjax", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ username })
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        usernamePanel.style.display = "none";
                        forgotPanel.style.display = "block";
                        securityQuestionDisplay.textContent = data.question;
                        resetUsername.value = username;
                    } else {
                        usernameError.textContent = data.message;
                    }
                })
                .catch(() => {
                    usernameError.textContent = "Something went wrong.";
                });
        });

        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('focus', clearValidationErrors);
        });

        window.addEventListener('DOMContentLoaded', function () {
            const showReset = '@(ViewBag.ShowResetPanel ?? false)'.toLowerCase() === 'true';
            if (showReset) {
                loginPanel.style.display = "none";
                usernamePanel.style.display = "none";
                forgotPanel.style.display = "block";
            }
        });
    </script>
}