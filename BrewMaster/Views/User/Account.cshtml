@model UserAccountViewModel
@{
    ViewData["Title"] = "Account";
}

<div class="form-container">
    <div class="form-header">
        <h2>Account Information</h2>
    </div>
    <div class="form-body">
        <form id="accountForm">
            @Html.AntiForgeryToken()
            <table class="info-table">
                @foreach (var prop in typeof(UserAccountViewModel).GetProperties().Where(p => p.Name != "UserName"))
                {
                    var val = prop.GetValue(Model) as string;
                    var displayName = prop.Name
                    .Replace("Name", " Name")
                    .Replace("Number", " Number")
                    .Replace("Address", " Address")
                    .Replace("Sur Name", "Last Name")
                    .Replace("UserState", "State")
                    .Replace("PostalCode", "Postal Code") + ":";

                    <tr>
                        <td><div class="form-label">@displayName</div></td>
                        <td>
                            <input type="text"
                                   name="@prop.Name"
                                   class="form-input"
                                   value="@val"
                                   data-original="@val"
                                   placeholder="Not provided"
                                   disabled />
                        </td>
                    </tr>
                }
            </table>
            <div class="button-row">
                <button type="button" id="editBtn" class="btn btn-primary">✏️ Edit</button>
                <button type="submit" id="saveBtn" class="btn btn-success" style="display:none;">💾 Save</button>
                <button type="button" id="cancelBtn" class="btn btn-secondary" style="display:none;">❌ Cancel</button>
            </div>
        </form>
    </div>
</div>

<div id="toast" class="toast"></div>

@section Scripts {
    <script>
        const editBtn = document.getElementById("editBtn");
        const saveBtn = document.getElementById("saveBtn");
        const cancelBtn = document.getElementById("cancelBtn");
        const inputs = document.querySelectorAll("#accountForm input[type='text']");
        const toast = document.getElementById("toast");

        // Enable edit mode
        editBtn.addEventListener("click", () => {
            inputs.forEach(inp => {
                inp.disabled = false;
                inp.classList.add('editing');
            });
            editBtn.style.display = "none";
            saveBtn.style.display = "inline-flex";
            cancelBtn.style.display = "inline-flex";
        });

        // Cancel changes
        cancelBtn.addEventListener("click", () => {
            inputs.forEach(inp => {
                inp.disabled = true;
                inp.value = inp.dataset.original || "";
                inp.classList.remove('editing', 'changed');
            });
            editBtn.style.display = "inline-flex";
            saveBtn.style.display = "none";
            cancelBtn.style.display = "none";
        });

        // Track changes
        inputs.forEach(inp => {
            inp.addEventListener("input", () => {
                const hasChanged = inp.value.trim() !== (inp.dataset.original || "");
                inp.classList.toggle('changed', hasChanged);
            });
        });

        // Save changes
        document.getElementById("accountForm").addEventListener("submit", function (e) {
            e.preventDefault();

            const updatedFields = {};
            inputs.forEach(inp => {
                const original = inp.dataset.original || "";
                const current = inp.value.trim();
                if (current !== original) {
                    updatedFields[inp.name] = current;
                }
            });

            if (Object.keys(updatedFields).length === 0) {
                showToast("No changes to save", "warning");
                return;
            }

            saveBtn.disabled = true;
            saveBtn.innerHTML = "💾 Saving...";

            fetch("/User/UpdateAllFields", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(updatedFields)
            }).then(res => res.json()).then(data => {
                if (data.success) {
                    // Update original values
                    inputs.forEach(inp => {
                        if (updatedFields[inp.name] !== undefined) {
                            inp.dataset.original = inp.value;
                            inp.classList.remove('changed');
                        }
                    });
                    cancelBtn.click(); // Exit edit mode
                    showToast("Account updated successfully!", "success");
                } else {
                    showToast(data.message || "Update failed", "error");
                }
            }).catch(() => {
                showToast("Something went wrong", "error");
            }).finally(() => {
                saveBtn.disabled = false;
                saveBtn.innerHTML = "💾 Save";
            });
        });

        function showToast(message, type = "success") {
            toast.textContent = message;
            toast.className = `toast ${type} show`;
            setTimeout(() => toast.classList.remove("show"), 3000);
        }
    </script>
}

<style>
    .form-container{
        max-width: 800px;
        margin: 0rem auto;
    }

    .form-input{
        min-width: 500px;
        margin-bottom: 0.7rem;
    }

    .form-input.editing {
        background: rgba(255, 255, 255, 0.12);
        border-color: #8B4513;
    }

    .form-input.changed {
        border-color: #DAA520;
        box-shadow: 0 0 0 2px rgba(218, 165, 32, 0.3);
    }

    .info-table td:first-child {
        justify-content: center;
        width: 250px;
        font-weight: 600;
    }

    .button-row {
        margin-top: 1.5rem;
        gap: 0.5rem;
    }

    .btn {
        min-width: 100px;
    }

    .toast {
        position: fixed;
        top: 100px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        transform: translateX(350px);
        transition: transform 0.3s ease;
        z-index: 1000;
    }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(135deg, #228B22, #006400);
        }

        .toast.error {
            background: linear-gradient(135deg, #DC143C, #B22222);
        }

        .toast.warning {
            background: linear-gradient(135deg, #DAA520, #B8860B);
        }
</style>